"""Main code body"""
import requests
import json
from datetime import datetime
from copy import deepcopy
import io
import google.auth
from  google.cloud import bigquery
from  object_model import (
    fflOwner,
    fflPlayer,
    fflTeam
)
swid = '{EEC210EE-DAC6-11D2-94E8-0060B067D8ED}'
espn_s2 = 'AECzbf5PiFkW8NaM6ROQ3eDXVRzDbAXdCLeBxiF%2B6SniGFEEAwChH3EWQXG5vfzMo22bM2WA%2BCItF0FQBS5HJcMXZhPDIDUVZHTTW1cPqeE06cjTFA9ODzu%2F26c%2Bd597ks4Pp6N7fDdqAKHBdv4zefe1Fhw0q53NjlzwC9oXd1Y2nzntcIcuaULkUG68HuDGaHrjZNqrwghuftxdybqbDVNqa37%2BCe4FRtIy744l98r%2FJZun1yoS6jCzwY6CAUno97nIfEjJJ1pwKAEHQz87AQudAs7L%2B2JBR41RrUikW67heg%3D%3D'

POSITION_MAP = {0: 'QB', 1: 'QB', 2: 'RB', 3: 'WR', 4: 'TE', 5: 'K', 6: 'TE', 7: 'OP', 8: 'DT', 9: 'DE', 10: 'LB', 11: 'DL',12: 'CB', 13: 'S', 14: 'DB', 15: 'DP', 16: 'D/ST',  17: 'K', 18: 'P',  19: 'HC',  20: 'BE',  21: 'IR',  22: '',  23: 'RB/WR/TE',  24: 'ER',  25: 'Rookie', 'QB': 0, 'RB': 2, 'WR': 4, 'TE': 6, 'D/ST': 16, 'K': 17, 'FLEX': 23}
TEAM_NAMES = {1: 'Burlingame Bad Deals', 2: 'Fall City Hairy Backfield', 3: 'Bellevue LFGs', 4: 'Freeman Balls', 5: 'Half Chubb', 6: 'Stuck Up Hunts', 7: 'North Beach Mobsters', 8: 'Chicago Homers', 9: 'Crazy Rich Asian', 10: 'Oakland Hills Hacks'}
TEAM_OWNERS = {1: 'Ben Shapiro', 2: 'Adam Grossman', 3: 'Jason LeeKeenan', 4: 'Brendan Buhmann', 5: 'Mike Blais', 6: 'Dave Karol', 7: 'Jordan Koene', 8: 'Nate Lyman', 9: 'Yi-Jau Ku', 10: 'Doug Bell'}

    
def main():
    
    tenderknob_teams = populate_objects()
    teams_csv = list()
    for team in tenderknob_teams.values():
        teams_csv.extend(create_csv(team))
    load_job = load_teams_to_bq(io.StringIO("\n".join(teams_csv)),"tenderknob-dynasty-ffl-829734","Tenderknob_Dynasty_FFL","teams_list")
    print(load_job)
    
def populate_objects() -> dict:
    """Populate objects into dict

    Returns:
        dict: dict of ffl Team Objects
    """
    api_url = "http://fantasy.espn.com/apis/v3/games/ffl/seasons/2023/segments/0/leagues/612662"
    
    request_params = [
        'mRoster',
        'mTeam',
        'mSettings',
        'mPendingTransactions',
        'mMatchupScore',
        'mScoreboard',
        'mStatus'
    ]

    full_request = [("view",param) for param in request_params]
    response = requests.get(api_url,
        cookies={'swid': swid,
                    'espn_s2': espn_s2},
        params=full_request, timeout=60
        )

    data = json.loads(response.text)
    response_teams = data['teams']
    response_members = data['members']
    ffl_teams = {}
    ffl_owners = {}
    for member in response_members:
        ffl_owners[member["id"]]=fflOwner(member["id"],member["firstName"],member["lastName"])
    for team in response_teams:
        curr_team = ffl_teams[team["id"]] = fflTeam(team["name"],team["id"],team["divisionId"],ffl_owners[team["primaryOwner"]])
        for player in team["roster"]["entries"]:
            player_details = player['playerPoolEntry']['player']
            curr_team.add_player(
                fflPlayer(
                    player_details['fullName'],
                    player_details["id"],
                    player_details["seasonOutlook"],
                    player_details["defaultPositionId"],
                    player["lineupSlotId"],
                    max(player['playerPoolEntry']["keeperValue"],1),
                    player_details["injured"],
                    player["acquisitionDate"],
                    player["acquisitionType"]
                ))
    return ffl_teams


def create_csv(team:fflTeam) -> str:
    """Creates csv data from teams dict

    Args:
        teams (dict): dict of FFL Teams objects
        
    Retunrs:
        str: new-line delimited csv to upload to BQ
    """
    base_list = [team.owner.full_name,team.team_name,team.division_name,str(team.division_id),str(team.team_number),datetime.today().strftime('%Y-%m-%d')]
    team_data = list()
    for player in team.players:
        temp_base = deepcopy(base_list)
        player_data = [player.name,player.message,player.player_position,player.lineup_position, str(player.salary),str(player.injured),player.acquisition_type,player.acquisition_date]
        team_data.append(",".join(temp_base+player_data))
    return team_data
    
def load_teams_to_bq(
    csvdata:str,
    projectId:str,
    dataset_id:str,
    table_id:str
) -> str:
    """Uploads data to bigquery table

    Args:
        csvdata (str): Parsed Data from Fantasy league
        projectId (str): Google Cloud Project ID
        datasetId (str): Bigquery dataset
        tableId (str): BigQuery table ID

    Returns:
        str: Status of upload
    """
    
    credentials, project = google.auth.default(
            scopes=[
                "https://www.googleapis.com/auth/cloud-platform",
                "https://www.googleapis.com/auth/bigquery",
            ]
        )

    bq_client = bigquery.Client(
            credentials=credentials, project=project
        )
    
    ffl_dataset = bq_client.dataset(dataset_id,projectId)
    table_partition_ref = bigquery.TableReference(ffl_dataset,f"{table_id}${datetime.today().strftime('%Y%m%d')}")
    table_ref = bigquery.TableReference(ffl_dataset,table_id)
    schema = list()
    fields = {
        "Owner_Name":"STRING",
        "Team_Name":"STRING",
        "Division_Name":"STRING",
        "Division_ID":"STRING",
        "Team_Number":"STRING",
        "Load_Date":"DATE",
        "Player_Name":"STRING",
        "Player_Message":"STRING",
        "Player_Position":"STRING",
        "Player_Lineup_Position":"STRING",
        "Player_Salary":"INT64",
        "Injured":"Boolean",
        "Acquisition_Type":"STRING",
        "Acquisition_Date":"STRING"
    }
    for field,datatype in fields.items():
        schema.append(bigquery.SchemaField(field,datatype))
    
    table = bigquery.Table(table_ref,schema)
    
    
    try:
        bq_client.create_table(table)
    except:
        print("already exists")
    load_job_config = bigquery.LoadJobConfig()
    
    load_job_config.schema = schema
    load_job_config.write_disposition = bigquery.WriteDisposition.WRITE_TRUNCATE
    load_job_config.create_disposition = bigquery.CreateDisposition.CREATE_IF_NEEDED
    load_job = bq_client.load_table_from_file(csvdata,table_partition_ref,job_config = load_job_config)

    load_job_status = load_job.result()
    return load_job_status.done()
    
# def fill_roster(teams):
#     rosters = []

#     for team in teams:
#         team_data = {}
#         team_data['Team_ID'] = team['id']
#         team_data['Team_Name'] = TEAM_NAMES[team['id']]
#         team_data['Team_Owner'] = TEAM_OWNERS[team['id']]
#         team_data['roster'] = get_roster(team['roster']['entries'])
#         rosters.append(team_data)
#     return rosters

# def get_roster(team):
#     roster = []

#     for player in team:
#         player_data = {}
#         if player['lineupSlotId'] == 21: 
#            player_data['name'] = ("IR-" + player['playerPoolEntry']['player']['fullName'])
#         else:
#             player_data['name'] = player['playerPoolEntry']['player']['fullName']
#         player_data['lineup_slot'] = POSITION_MAP[player['playerPoolEntry']['player']['defaultPositionId']]
#         if player['playerPoolEntry']['keeperValue'] == 0:
#             # replaced 'keeperValueFuture' with 'keeperValue' for pre draft script
#             player_data['salary'] = 1
#         else:
#             player_data['salary'] = player['playerPoolEntry']['keeperValue']
#             # replaced 'keeperValueFuture' with 'keeperValue' for pre draft script
#         player_data['Acquisition_Date'] = moment.unix(player['acquisitionDate']).format('MM-DD-YY') 
#         roster.append(player_data)
#     return roster

# def write_csv(data):
#     player_data_file = open('tkdl_rosters.csv', 'w')
#     csvwriter = csv.writer(player_data_file)
#     headers = ['Index', 'Team Name', 'Team Owner', 'Player Name', 'Position', 'Salary', 'Acquisition Date'
#     ]
#     csvwriter.writerow(headers)
#     print(data[0])
#     for key in data:
#         count = 1
#         for player in key['roster']:
#             obj = {}
#             obj['index'] = (count, key['Team_Owner'])
#             obj['teamName'] = key['Team_Name']
#             obj['teamOwner'] = key['Team_Owner']

#             obj['name'] = player['name']
#             obj['position'] = player['lineup_slot']
#             obj['salary'] = player['salary']
#             obj['date'] = player['Acquisition_Date']
#             print(obj)
#             csvwriter.writerow(obj.values())
#             count = count + 1

#     player_data_file.close()

if __name__ == '__main__':
    main()
