### to get into ENV environemnt - source ENV/bin/activate
from dataclasses import dataclass, field
import requests, json
import google.cloud.bigquery
swid = '{EEC210EE-DAC6-11D2-94E8-0060B067D8ED}'
espn_s2 = 'AECzbf5PiFkW8NaM6ROQ3eDXVRzDbAXdCLeBxiF%2B6SniGFEEAwChH3EWQXG5vfzMo22bM2WA%2BCItF0FQBS5HJcMXZhPDIDUVZHTTW1cPqeE06cjTFA9ODzu%2F26c%2Bd597ks4Pp6N7fDdqAKHBdv4zefe1Fhw0q53NjlzwC9oXd1Y2nzntcIcuaULkUG68HuDGaHrjZNqrwghuftxdybqbDVNqa37%2BCe4FRtIy744l98r%2FJZun1yoS6jCzwY6CAUno97nIfEjJJ1pwKAEHQz87AQudAs7L%2B2JBR41RrUikW67heg%3D%3D'

POSITION_MAP = {0: 'QB', 1: 'QB', 2: 'RB', 3: 'WR', 4: 'TE', 5: 'K', 6: 'TE', 7: 'OP', 8: 'DT', 9: 'DE', 10: 'LB', 11: 'DL',12: 'CB', 13: 'S', 14: 'DB', 15: 'DP', 16: 'D/ST',  17: 'K', 18: 'P',  19: 'HC',  20: 'BE',  21: 'IR',  22: '',  23: 'RB/WR/TE',  24: 'ER',  25: 'Rookie', 'QB': 0, 'RB': 2, 'WR': 4, 'TE': 6, 'D/ST': 16, 'K': 17, 'FLEX': 23}
TEAM_NAMES = {1: 'Burlingame Bad Deals', 2: 'Fall City Hairy Backfield', 3: 'Bellevue LFGs', 4: 'Freeman Balls', 5: 'Half Chubb', 6: 'Stuck Up Hunts', 7: 'North Beach Mobsters', 8: 'Chicago Homers', 9: 'Crazy Rich Asian', 10: 'Oakland Hills Hacks'}
TEAM_OWNERS = {1: 'Ben Shapiro', 2: 'Adam Grossman', 3: 'Jason LeeKeenan', 4: 'Brendan Buhmann', 5: 'Mike Blais', 6: 'Dave Karol', 7: 'Jordan Koene', 8: 'Nate Lyman', 9: 'Yi-Jau Ku', 10: 'Doug Bell'}

@dataclass(slots=True)
class fflOwner():
    id:str
    first_name:str
    last_name:str
    full_name:str = ""
    
    def __post_init__(self):
        self.full_name = f"{self.first_name} {self.last_name}"
    
@dataclass(slots=True)   
class fflPlayer():
    name:str
    id:str
    message:str
    player_position:str
    lineup_position:str
    last_week_score:int
    current_week_score:int
    

@dataclass(slots=True)
class fflTeam():
    team_name:str
    team_number:str
    players:list(fflPlayer) = list()
    owner:fflOwner = None
    
    def assign_owner(
        self,
        owner
    ):
        """Assigns an owner to the team

        Args:
            owner (_type_): Team Owner object
        """
        self.owner = owner
        
    def add_player(
        self,
        player:fflPlayer
    ):
        self.players.append(player)
    
    
def main():
    geourl = "http://fantasy.espn.com/apis/v3/games/ffl/seasons/2023/segments/0/leagues/612662"

    response = requests.get(geourl,
        cookies={'swid': swid,
                 'espn_s2': espn_s2},
        params=[('view': 'mRoster'),('view','mTeams')]
        )

    data = json.loads(response.text)
    response_teams = data['teams']
    response_members = data['members']
    ffl_teams = []
    for team in response_teams:
        ffl_teams.append(fflOwner(team[""]))

    

def fill_roster(teams):
    rosters = []

    for team in teams:
        team_data = {}
        team_data['Team_ID'] = team['id']
        team_data['Team_Name'] = TEAM_NAMES[team['id']]
        team_data['Team_Owner'] = TEAM_OWNERS[team['id']]
        team_data['roster'] = get_roster(team['roster']['entries'])
        rosters.append(team_data)
    return rosters

def get_roster(team):
    roster = []

    for player in team:
        player_data = {}
        if player['lineupSlotId'] == 21: 
           player_data['name'] = ("IR-" + player['playerPoolEntry']['player']['fullName'])
        else:
            player_data['name'] = player['playerPoolEntry']['player']['fullName']
        player_data['lineup_slot'] = POSITION_MAP[player['playerPoolEntry']['player']['defaultPositionId']]
        if player['playerPoolEntry']['keeperValue'] == 0:
            # replaced 'keeperValueFuture' with 'keeperValue' for pre draft script
            player_data['salary'] = 1
        else:
            player_data['salary'] = player['playerPoolEntry']['keeperValue']
            # replaced 'keeperValueFuture' with 'keeperValue' for pre draft script
        player_data['Acquisition_Date'] = moment.unix(player['acquisitionDate']).format('MM-DD-YY') 
        roster.append(player_data)
    return roster

def write_csv(data):
    player_data_file = open('tkdl_rosters.csv', 'w')
    csvwriter = csv.writer(player_data_file)
    headers = ['Index', 'Team Name', 'Team Owner', 'Player Name', 'Position', 'Salary', 'Acquisition Date'
    ]
    csvwriter.writerow(headers)
    print(data[0])
    for key in data:
        count = 1
        for player in key['roster']:
            obj = {}
            obj['index'] = (count, key['Team_Owner'])
            obj['teamName'] = key['Team_Name']
            obj['teamOwner'] = key['Team_Owner']

            obj['name'] = player['name']
            obj['position'] = player['lineup_slot']
            obj['salary'] = player['salary']
            obj['date'] = player['Acquisition_Date']
            print(obj)
            csvwriter.writerow(obj.values())
            count = count + 1

    player_data_file.close()

if __name__ == '__main__':
    get_league_sum()
